{"version":3,"file":"index.js","sources":["../src/preload/index.ts"],"sourcesContent":["console.log('ðŸ”Œ Preload script starting...');\n\nimport { contextBridge, ipcRenderer } from 'electron';\nimport { IPC_CHANNELS, FileOpenMessage, FileReadMessage, FileWriteMessage } from '../shared/ipc';\n\nconsole.log('[Preload] Starting preload script');\n\n// Verify that we have access to electron APIs\nif (!ipcRenderer) {\n  console.error('[Preload] No ipcRenderer available!');\n  throw new Error('ipcRenderer not available in preload');\n}\n\ntry {\n  // Create the API object\n  const electronAPI = {\n    ipcRenderer: {\n      send: (channel: string, message: any) => {\n        console.log('[Preload] send:', channel, message);\n        ipcRenderer.send(channel, message);\n      },\n      invoke: async (channel: string, message: any) => {\n        console.log('[Preload] invoke:', channel, message);\n        const result = await ipcRenderer.invoke(channel, message);\n        console.log('[Preload] invoke result:', result);\n        return result;\n      },\n      on: (channel: string, callback: (message: any) => void) => {\n        console.log('[Preload] Adding listener for:', channel);\n        const handler = (_event: Electron.IpcRendererEvent, message: any) => {\n          console.log('[Preload] Received:', channel, message);\n          callback(message);\n        };\n        ipcRenderer.on(channel, handler);\n      },\n      once: (channel: string, callback: (message: any) => void) => {\n        const handler = (_event: Electron.IpcRendererEvent, message: any) => {\n          console.log('[Preload] Received once:', channel, message);\n          callback(message);\n        };\n        ipcRenderer.once(channel, handler);\n      },\n      removeListener: (channel: string, callback: (message: any) => void) => {\n        ipcRenderer.removeListener(channel, callback);\n      },\n      removeAllListeners: (channel: string) => {\n        ipcRenderer.removeAllListeners(channel);\n      }\n    }\n  };\n\n  // Expose the API to the renderer process\n  console.log('[Preload] Exposing electron API to window');\n  contextBridge.exposeInMainWorld('electron', electronAPI);\n  console.log('[Preload] Preload script complete');\n\n} catch (error) {\n  console.error('[Preload] Error in preload script:', error);\n  throw error; // Re-throw to make sure the error is visible\n}\n"],"names":["ipcRenderer","contextBridge"],"mappings":";;AAAA,QAAQ,IAAI,+BAA+B;AAK3C,QAAQ,IAAI,mCAAmC;AAG/C,IAAI,CAACA,sBAAa;AAChB,UAAQ,MAAM,qCAAqC;AAC7C,QAAA,IAAI,MAAM,sCAAsC;AACxD;AAEA,IAAI;AAEF,QAAM,cAAc;AAAA,IAClB,aAAa;AAAA,MACX,MAAM,CAAC,SAAiB,YAAiB;AAC/B,gBAAA,IAAI,mBAAmB,SAAS,OAAO;AACnCA,6BAAA,KAAK,SAAS,OAAO;AAAA,MACnC;AAAA,MACA,QAAQ,OAAO,SAAiB,YAAiB;AACvC,gBAAA,IAAI,qBAAqB,SAAS,OAAO;AACjD,cAAM,SAAS,MAAMA,SAAAA,YAAY,OAAO,SAAS,OAAO;AAChD,gBAAA,IAAI,4BAA4B,MAAM;AACvC,eAAA;AAAA,MACT;AAAA,MACA,IAAI,CAAC,SAAiB,aAAqC;AACjD,gBAAA,IAAI,kCAAkC,OAAO;AAC/C,cAAA,UAAU,CAAC,QAAmC,YAAiB;AAC3D,kBAAA,IAAI,uBAAuB,SAAS,OAAO;AACnD,mBAAS,OAAO;AAAA,QAClB;AACYA,6BAAA,GAAG,SAAS,OAAO;AAAA,MACjC;AAAA,MACA,MAAM,CAAC,SAAiB,aAAqC;AACrD,cAAA,UAAU,CAAC,QAAmC,YAAiB;AAC3D,kBAAA,IAAI,4BAA4B,SAAS,OAAO;AACxD,mBAAS,OAAO;AAAA,QAClB;AACYA,6BAAA,KAAK,SAAS,OAAO;AAAA,MACnC;AAAA,MACA,gBAAgB,CAAC,SAAiB,aAAqC;AACzDA,6BAAA,eAAe,SAAS,QAAQ;AAAA,MAC9C;AAAA,MACA,oBAAoB,CAAC,YAAoB;AACvCA,iBAAA,YAAY,mBAAmB,OAAO;AAAA,MAAA;AAAA,IACxC;AAAA,EAEJ;AAGA,UAAQ,IAAI,2CAA2C;AACzCC,yBAAA,kBAAkB,YAAY,WAAW;AACvD,UAAQ,IAAI,mCAAmC;AAEjD,SAAS,OAAO;AACN,UAAA,MAAM,sCAAsC,KAAK;AACnD,QAAA;AACR;"}