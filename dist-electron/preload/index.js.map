{"version":3,"file":"index.js","sources":["../../src/preload/index.ts"],"sourcesContent":["console.log('ðŸ”Œ Preload script starting...');\n\n// @ts-ignore\nimport { contextBridge, ipcRenderer } from 'electron';\nimport { type IPC_CHANNELS, type IpcChannel } from '../shared/ipc';\n\nconsole.log('[Preload] Starting preload script');\n\n// Check if we're in a renderer process\nif (!process.type) {\n  console.log('[Preload] Not in a renderer process');\n  process.exit(1);\n}\n\nconst init = () => {\n  try {\n    // Expose protected methods that allow the renderer process to use\n    // the ipcRenderer without exposing the entire object\n    contextBridge.exposeInMainWorld('electron', {\n      ipcRenderer: {\n        send: (channel: IpcChannel, data: any) => {\n          console.log('[Preload] Sending on channel:', channel, data);\n          ipcRenderer.send(channel, data);\n        },\n        on: (channel: IpcChannel, func: (...args: any[]) => void) => {\n          console.log('[Preload] Registering listener for channel:', channel);\n          // Deliberately strip event as it includes `sender` \n          ipcRenderer.on(channel, (event, ...args) => func(...args));\n        },\n        invoke: async (channel: IpcChannel, data: any) => {\n          console.log('[Preload] Invoking on channel:', channel, data);\n          return await ipcRenderer.invoke(channel, data);\n        },\n        removeListener: (channel: IpcChannel, func: (...args: any[]) => void) => {\n          console.log('[Preload] Removing listener for channel:', channel);\n          ipcRenderer.removeListener(channel, func);\n        },\n        removeAllListeners: (channel: IpcChannel) => {\n          console.log('[Preload] Removing all listeners for channel:', channel);\n          ipcRenderer.removeAllListeners(channel);\n        }\n      }\n    });\n\n    console.log('[Preload] API exposed successfully');\n  } catch (error) {\n    console.error('[Preload] Error initializing:', error);\n  }\n};\n\n// Initialize immediately\ninit();\n"],"names":["contextBridge","ipcRenderer"],"mappings":";;AAAA,QAAQ,IAAI,+BAA+B;AAM3C,QAAQ,IAAI,mCAAmC;AAG/C,IAAI,CAAC,QAAQ,MAAM;AACjB,UAAQ,IAAI,qCAAqC;AACjD,UAAQ,KAAK,CAAC;AAChB;AAEA,MAAM,OAAO,MAAM;AACb,MAAA;AAGFA,aAAA,cAAc,kBAAkB,YAAY;AAAA,MAC1C,aAAa;AAAA,QACX,MAAM,CAAC,SAAqB,SAAc;AAChC,kBAAA,IAAI,iCAAiC,SAAS,IAAI;AAC9CC,+BAAA,KAAK,SAAS,IAAI;AAAA,QAChC;AAAA,QACA,IAAI,CAAC,SAAqB,SAAmC;AACnD,kBAAA,IAAI,+CAA+C,OAAO;AAEtDA,+BAAA,GAAG,SAAS,CAAC,UAAU,SAAS,KAAK,GAAG,IAAI,CAAC;AAAA,QAC3D;AAAA,QACA,QAAQ,OAAO,SAAqB,SAAc;AACxC,kBAAA,IAAI,kCAAkC,SAAS,IAAI;AAC3D,iBAAO,MAAMA,SAAA,YAAY,OAAO,SAAS,IAAI;AAAA,QAC/C;AAAA,QACA,gBAAgB,CAAC,SAAqB,SAAmC;AAC/D,kBAAA,IAAI,4CAA4C,OAAO;AACnDA,+BAAA,eAAe,SAAS,IAAI;AAAA,QAC1C;AAAA,QACA,oBAAoB,CAAC,YAAwB;AACnC,kBAAA,IAAI,iDAAiD,OAAO;AACpEA,mBAAA,YAAY,mBAAmB,OAAO;AAAA,QAAA;AAAA,MACxC;AAAA,IACF,CACD;AAED,YAAQ,IAAI,oCAAoC;AAAA,WACzC,OAAO;AACN,YAAA,MAAM,iCAAiC,KAAK;AAAA,EAAA;AAExD;AAGA,KAAK;"}