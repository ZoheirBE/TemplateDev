{"version":3,"file":"index.js","sources":["../../src/shared/ipc.ts","../../src/main/ipcHandlers.ts","../../src/main/menu.ts","../../src/main/index.ts"],"sourcesContent":["/** IPC channel names */\nexport const IPC_CHANNELS = {\n  FILE_OPEN: 'file:open',\n  FILE_READ: 'file:read',\n  FILE_WRITE: 'file:write',\n  FILE_CHANGED: 'file:changed',\n  FILE_DELETED: 'file:deleted',\n  FILE_ERROR: 'file:error',\n  TEST_IPC: 'test:ipc',\n  TEST_IPC_REPLY: 'test:ipc:reply'\n} as const;\n\nexport type IpcChannel = typeof IPC_CHANNELS[keyof typeof IPC_CHANNELS];\n\n/** File open message payload */\nexport interface FileOpenMessage {\n  filePath: string;\n}\n\n/** File read message payload */\nexport interface FileReadMessage {\n  filePath: string;\n}\n\n/** File read response payload */\nexport interface FileReadResponse {\n  content: string;\n  error?: string;\n}\n\n/** File write message payload */\nexport interface FileWriteMessage {\n  filePath: string;\n  content: string;\n}\n\n/** File write response payload */\nexport interface FileWriteResponse {\n  success: boolean;\n  error?: string;\n}\n\n/** File change notification payload */\nexport interface FileChangeMessage {\n  filePath: string;\n  type: 'changed' | 'deleted';\n}\n\n/** File error payload */\nexport interface FileErrorMessage {\n  filePath: string;\n  error: string;\n  type: string;\n}\n","import { ipcMain, dialog } from 'electron';\nimport { promises as fs } from 'fs';\nimport * as path from 'path';\nimport { \n  FileReadMessage, \n  FileReadResponse, \n  FileWriteMessage, \n  FileWriteResponse, \n  FileErrorMessage,\n  IPC_CHANNELS \n} from '../shared/ipc';\n\nexport function setupIpcHandlers() {\n  console.log('[IPC] Setting up IPC handlers');\n  \n  // File operations\n  ipcMain.handle(IPC_CHANNELS.FILE_READ, async (event, message: FileReadMessage) => {\n    try {\n      console.log('[IPC] Reading file:', message);\n      if (!message?.filePath) {\n        throw new Error('No file path provided');\n      }\n      const content = await fs.readFile(message.filePath, 'utf-8');\n      console.log('[IPC] File read successfully, length:', content.length);\n      return { content } as FileReadResponse;\n    } catch (err) {\n      console.error('[IPC] Error reading file:', err);\n      const error = err instanceof Error ? err.message : 'Unknown error occurred';\n      return {\n        content: '',\n        error\n      } as FileReadResponse;\n    }\n  });\n\n  ipcMain.handle(IPC_CHANNELS.FILE_WRITE, async (event, message: FileWriteMessage) => {\n    try {\n      console.log('[IPC] Writing file:', message);\n      if (!message?.filePath) {\n        throw new Error('No file path provided');\n      }\n      await fs.writeFile(message.filePath, message.content, 'utf-8');\n      console.log('[IPC] File written successfully');\n      return { success: true } as FileWriteResponse;\n    } catch (err) {\n      console.error('[IPC] Error writing file:', err);\n      const error = err instanceof Error ? err.message : 'Unknown error occurred';\n      return {\n        success: false,\n        error\n      } as FileWriteResponse;\n    }\n  });\n\n  // File error logging\n  ipcMain.on(IPC_CHANNELS.FILE_ERROR, (event, message: FileErrorMessage) => {\n    console.error('[IPC] File error:', message);\n    // Here you could add additional error logging logic\n  });\n\n  // Test IPC connection\n  ipcMain.on(IPC_CHANNELS.TEST_IPC, (event, arg) => {\n    console.log('[IPC] Received test message:', arg);\n    event.reply(IPC_CHANNELS.TEST_IPC_REPLY, 'IPC connection working');\n  });\n\n  // File change notifications\n  ipcMain.on(IPC_CHANNELS.FILE_CHANGED, (event, filePath: string) => {\n    console.log('[IPC] File changed:', filePath);\n    event.sender.send(IPC_CHANNELS.FILE_CHANGED, filePath);\n  });\n\n  ipcMain.on(IPC_CHANNELS.FILE_DELETED, (event, filePath: string) => {\n    console.log('[IPC] File deleted:', filePath);\n    event.sender.send(IPC_CHANNELS.FILE_DELETED, filePath);\n  });\n}\n","import { app, Menu, BrowserWindow, dialog, MenuItemConstructorOptions } from 'electron';\nimport { IPC_CHANNELS } from '../shared/ipc';\n\nexport function createApplicationMenu(mainWindow: BrowserWindow) {\n  if (!mainWindow) {\n    console.error('[Menu] Cannot create menu without a valid window reference');\n    return;\n  }\n\n  console.log('[Menu] Creating application menu');\n  \n  const template: MenuItemConstructorOptions[] = [\n    {\n      label: 'File',\n      submenu: [\n        {\n          label: 'Open File',\n          accelerator: 'CmdOrCtrl+O',\n          click: async () => {\n            try {\n              console.log('[Menu] Open File clicked');\n              const result = await dialog.showOpenDialog(mainWindow, {\n                properties: ['openFile']\n              });\n              \n              if (!result.canceled && result.filePaths.length > 0) {\n                const filePath = result.filePaths[0];\n                console.log('[Menu] Selected file:', filePath);\n                mainWindow.webContents.send(IPC_CHANNELS.FILE_OPEN, { filePath });\n              }\n            } catch (error) {\n              console.error('[Menu] Error opening file:', error);\n            }\n          }\n        },\n        { type: 'separator' },\n        {\n          label: 'Exit',\n          click: () => {\n            app.quit();\n          }\n        }\n      ]\n    },\n    {\n      label: 'Edit',\n      submenu: [\n        { role: 'undo' },\n        { role: 'redo' },\n        { type: 'separator' },\n        { role: 'cut' },\n        { role: 'copy' },\n        { role: 'paste' },\n        { role: 'delete' },\n        { type: 'separator' },\n        { role: 'selectAll' }\n      ]\n    },\n    {\n      label: 'View',\n      submenu: [\n        { role: 'reload' },\n        { role: 'forceReload' },\n        { role: 'toggleDevTools' },\n        { type: 'separator' },\n        { role: 'resetZoom' },\n        { role: 'zoomIn' },\n        { role: 'zoomOut' },\n        { type: 'separator' },\n        { role: 'togglefullscreen' }\n      ]\n    }\n  ];\n\n  const menu = Menu.buildFromTemplate(template);\n  Menu.setApplicationMenu(menu);\n  console.log('[Menu] Application menu created successfully');\n}\n","import { app, BrowserWindow, session } from 'electron';\nimport { fileURLToPath } from 'url';\nimport { dirname, join } from 'path';\n\n// ES Module path resolution\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nimport { setupIpcHandlers } from './ipcHandlers';\nimport { createApplicationMenu } from './menu';\n\nconsole.log('[STARTUP] Main process starting');\nconsole.log('[STARTUP] Process ID:', process.pid);\nconsole.log('[STARTUP] Parent Process ID:', process.ppid);\nconsole.log('[STARTUP] Environment:', {\n  NODE_ENV: process.env.NODE_ENV,\n  VITE_DEV_SERVER_URL: process.env.VITE_DEV_SERVER_URL,\n});\n\nlet mainWindow: BrowserWindow | null = null;\nconst isDev = process.env.NODE_ENV === 'development';\n\n// Set up IPC handlers before creating any windows\nsetupIpcHandlers();\n\nconst createWindow = () => {\n  console.log('[Main] Creating window');\n  console.log('[Main] Environment:', process.env.NODE_ENV);\n  console.log('[Main] __dirname:', __dirname);\n  \n  // Set up CSP\n  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {\n    callback({\n      responseHeaders: {\n        ...details.responseHeaders,\n        'Content-Security-Policy': [\n          \"default-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net data: blob:;\"\n        ]\n      }\n    });\n  });\n\n  mainWindow = new BrowserWindow({\n    width: 1200,\n    height: 800,\n    webPreferences: {\n      nodeIntegration: false,\n      contextIsolation: true,\n      preload: join(__dirname, '../preload/index.js')\n    }\n  });\n\n  if (isDev) {\n    if (process.env.VITE_DEV_SERVER_URL) {\n      mainWindow.loadURL(process.env.VITE_DEV_SERVER_URL);\n      mainWindow.webContents.openDevTools();\n    }\n  } else {\n    // Load the index.html from the dist folder\n    mainWindow.loadFile(join(__dirname, '../renderer/index.html'));\n  }\n\n  // Create application menu\n  createApplicationMenu(mainWindow);\n\n  mainWindow.on('closed', () => {\n    mainWindow = null;\n  });\n};\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\napp.whenReady().then(createWindow);\n\n// Quit when all windows are closed.\napp.on('window-all-closed', () => {\n  // On OS X it is common for applications and their menu bar\n  // to stay active until the user quits explicitly with Cmd + Q\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('activate', () => {\n  // On OS X it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (mainWindow === null) {\n    createWindow();\n  }\n});\n"],"names":["ipcMain","fs","mainWindow","dialog","app","Menu","__filename","fileURLToPath","__dirname","dirname","session","BrowserWindow","join"],"mappings":"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"}